#version 330 core
//in vec2 TexCoord;

out vec4 color;
in vec3 Normal;
in vec3 FragPos;

//uniform sampler2D ourTexture1;
//uniform sampler2D ourTexture2;

struct Light {
    vec3 position;

    float ambient;
    float diffuse;
    float specular;
};

uniform Light light;

uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
    //color = mix(texture(ourTexture1, TexCoord), texture(ourTexture2, TexCoord), 0.0); // * vec4(1.0f, 1.0f, 0.0f, 1.0f);
    //color = vec4(1.0f, 1.0f, 0.0f, 1.0f);

    // Ambient
    float ambientStrength = 0.1f;
    //vec3 ambient = ambientStrength * lightColor;
    vec3 ambient = lightColor * light.ambient;

    // Diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor * light.diffuse;

    // Specular
    float specularStrength = 0.5f;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor * light.specular;  
    //vec3 specular = spec * lightColor * light.specular;  
        
    vec3 result = (ambient + diffuse + specular) * objectColor;
    color = vec4(result, 1.0f);
}